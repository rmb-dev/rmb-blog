<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/rmb-blog/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/rmb-blog/" rel="alternate" type="text/html" /><updated>2025-02-20T00:30:36-05:00</updated><id>http://localhost:4000/rmb-blog/feed.xml</id><title type="html">rmb_dev</title><subtitle>Step into the wacky world of cyber security, where I share my struggles, tips, and thoughts on my hobbies and life in general.</subtitle><author><name>Rom</name></author><entry><title type="html">Digital Minimalism</title><link href="http://localhost:4000/rmb-blog/blog/digital-minimalism" rel="alternate" type="text/html" title="Digital Minimalism" /><published>2024-02-20T00:00:00-05:00</published><updated>2024-02-20T00:00:00-05:00</updated><id>http://localhost:4000/rmb-blog/blog/digital-minimalism</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/digital-minimalism"><![CDATA[<p>Source: <a href="https://medium.com/@nikhilthota/digital-minimalism-ac083064b4e4">Nikhil Thota</a></p>

<p>A few months ago I was offered (and have since accepted) a full time offer to work at Facebook in San Francisco and in that time I have been reflecting on my own usage of social media and the amount of value it has added to my life.</p>

<p>A common trend I’ve been seeing is the urgency to delete all your social media IMMEDIATELY or even go completely off-the-grid to avoid the unimaginable long-term implications of having your attention and personal data potentially manipulated and abused. I don’t think that we can thrive in today’s world without utilizing the platforms that allow us such a dense level of interconnectivity. I’m not saying that things couldn’t be engineered better; what I am saying however, is that we can take control of how these platforms influence us and in a sense, take control of our own evolution.</p>

<p>Anyways, here are five things I’ve done which have allowed me to be a participant in the digital world, but not have my attention micromanaged:</p>

<h2 id="1-unsubscribe-from-irrelevant-emails">1. Unsubscribe from irrelevant emails</h2>

<p>Inbox-zero isn’t a new idea but it’s infinitely more difficult to achieve this if you’re bombarded with emails from random retailers offering coupons and one-in-a-lifetime deals you’re never going to use.</p>

<p>A simple way to de-clutter your inbox is to look at each email you receive from a subscription and if it’s not immediately relevant (or will be in the foreseeable future), just scroll to the bottom and hit that unsubscribe button. Over time you’ll receive less and less irrelevant emails and this will naturally translate into less stress in the back of your mind.</p>

<p>And for those subscriptions and newsletters that you do want to keep, Unroll.me is a great tool I’ve used to manage the amount of content I see in my inbox. It allows you to wrap all relevant subscriptions into a daily newsletter that you see once and can tackle at your own leisure (it even allows you to unsubscribe directly from their platform!)</p>

<h2 id="2-unfollow-people-on-social-media">2. Unfollow people on social media</h2>

<p>As you progress through school, jobs, projects, and whatever else you devote your time to, you tend to meet a lot of people who you may add on Facebook, follow on Instagram, but never develop a real relationship with. These acquaintances bloat your feeds and may cause you to miss out on important things that happen to those in your life who do matter.</p>

<p>What I have done is unfollow (or mute) the people that I don’t spend time with in person or plan to in the future. This includes brands, groups, events or influencers who I don’t feel are genuinely inspiring me. The beauty of this is that you are freeing up more time and mental space to interact with the content and people who you truly do want to invest in.</p>

<p>If you don’t want to be dramatic but still want more manageable social media feeds, the mute feature does thankfully exist. This allows you to mute someone’s posts, stories, and other notifications without explicitly unfollowing them and not tarnishing your (probably nonexistent) relationship with them.</p>

<h2 id="3-take-occasional-social-media-purges">3. Take occasional social media purges</h2>

<p>It’s no secret that social media messes with the reward circuitry in your brain. One of the best ways to see just how it works is to take a social media purge where you commit to not using it for a certain amount of time. I’ve been surprised at how reflexively I reach for my phone and even more surprised at the free time and mental clarity I have after a couple days of adjusting.</p>

<p>In the past I’ve experimented with social media detoxes ranging from days to weeks and have found that the best strategy to avoid the temptation is to just delete the apps and not re-download until your purge is over. Most of the time you have an urge to check something, it’s simply a reflex and you won’t follow through since downloading the app again will take time and you will have caught yourself by then.</p>

<p>Another strategy, courtesy of Kenton Prescott is to enact a recurring purge, where you keep your phone in airplane mode (or even Do Not Disturb) for some amount of hours a day, limiting the time you spend catching up on notifications. The idea is that everyone can wait a few hours for your attention, even in the case of emergencies.</p>

<h2 id="4-turn-off-notifications-for-non-essential-things">4. Turn off notifications for non-essential things</h2>

<p>This one is pretty simple, just turn off notifications for things that are not essential. Every time your phone or wearable buzzes, you’re losing precious mental bandwidth which can take up to 23 minutes to get back!</p>

<p>In similar fashion to the previous steps, this takes some time and conscious effort daily where you take note of all notifications you get, evaluate if each one is worth the time, and turn off as necessary.</p>

<h2 id="5-learn-how-to-use-built-in-tools">5. Learn how to use built in tools</h2>

<p>One of my favorite features on my phone is Do Not Disturb. It allows you to silence all non-critical notifications for an indefinite amount of time. This is what I use when I’m working on school work, personal projects, or even this article. On both iOS and Android, you’re given fairly granular control over what is considered critical so you can pick and choose what is worth the focus lost from a distraction.</p>

<figure class="figure w-100">
  <img src="https://cdn-images-1.medium.com/max/1000/0*MAeS-4fEc0Y7T4VB.jpg" class="figure-img img-fluid rounded" alt="iOS" /><figcaption class="figure-caption text-center">iOS</figcaption></figure>
<figure class="figure w-100">
  <img src="https://cdn-images-1.medium.com/max/1000/0*nF_H2-8oTY7C0a54.png" class="figure-img img-fluid rounded" alt="Android" /><figcaption class="figure-caption text-center">Android</figcaption></figure>

<p>Apple and Google also fairly recently rolled out time management tools which allow the user to be restricted from certain applications after a given amount of use. This really helps to add an extra layer of discipline if you’re trying to build the habit of using your phone less.</p>

<p>Minimalism isn’t a philosophy that demands you to sell everything you own, wear the same outfit for the rest of your life, and live out of your van. Rather, it’s taking a hard look at everything in your life and determining whether something truly provides happiness for you. Digital Minimalism is a subset of this way of thinking and is a philosophy that has allowed me to work in tech and be an active participant of social media, but also maintain my own level of free thinking and choose what I focus on.</p>

<p>I hope this has helped at least one person out there better manage their digital engagement. When I was first starting my foray into this way of thinking, this documentary by Matt D’Avella really helped me understand what minimalism was all about and is something I’d recommend if you’d like to learn more!</p>]]></content><author><name>Rom</name></author><category term="Social Media" /><category term="Minimalism" /><category term="Technology" /><summary type="html"><![CDATA[Minimalism is the art of knowing how much is just enough. Digital minimalism applies this idea to our personal technology. It’s the key to living a focused life in an increasingly noisy world.]]></summary></entry><entry><title type="html">chatGPT - virtual helper for masses</title><link href="http://localhost:4000/rmb-blog/blog/chatGPT" rel="alternate" type="text/html" title="chatGPT - virtual helper for masses" /><published>2023-04-25T00:00:00-04:00</published><updated>2023-04-25T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/chatGPT</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/chatGPT"><![CDATA[]]></content><author><name>Rom</name></author><category term="AI" /><category term="chatGPT" /><category term="OpenAI" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Icons for Figma</title><link href="http://localhost:4000/rmb-blog/blog/figma-icons" rel="alternate" type="text/html" title="Icons for Figma" /><published>2023-04-20T13:00:00-04:00</published><updated>2023-04-20T13:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/figma-icons</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/figma-icons"><![CDATA[<ul>
  <li>Lucide icons (plugin)</li>
  <li>Addjust (plugin, 3D)</li>
  <li>Iconly (file)</li>
  <li>Hicon (file)</li>
  <li>Koloicons (file)</li>
  <li>Ricon (file)</li>
  <li>iconic.app</li>
  <li>lineicons.com</li>
  <li>iconshock.com</li>
  <li>thenounproject.com</li>
  <li>streamlinehq.com</li>
  <li>iconfinder.com</li>
  <li>iconscout.com</li>
</ul>]]></content><author><name>Rom</name></author><category term="ui design" /><category term="figma" /><category term="icons" /><summary type="html"><![CDATA[Lucide icons (plugin) Addjust (plugin, 3D) Iconly (file) Hicon (file) Koloicons (file) Ricon (file) iconic.app lineicons.com iconshock.com thenounproject.com streamlinehq.com iconfinder.com iconscout.com]]></summary></entry><entry><title type="html">Useful AI Tools for Frontend Developers</title><link href="http://localhost:4000/rmb-blog/blog/AI-tools" rel="alternate" type="text/html" title="Useful AI Tools for Frontend Developers" /><published>2023-04-10T00:00:00-04:00</published><updated>2023-04-10T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/AI-tools</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/AI-tools"><![CDATA[<p>Artificial intelligence is becoming an important part of the IT world and life in general. In the new article, we will figure out which AI services can already be used by Frontend developers and other IT professionals to solve everyday work tasks.</p>]]></content><author><name>Rom</name></author><category term="Coding" /><category term="Workflow" /><summary type="html"><![CDATA[Artificial intelligence is becoming an important part of the IT world and life in general. In the new article, we will figure out which AI services can already be used by Frontend developers and other IT professionals to solve everyday work tasks.]]></summary></entry><entry><title type="html">10 basic programming principles every programmer must know</title><link href="http://localhost:4000/rmb-blog/blog/coding" rel="alternate" type="text/html" title="10 basic programming principles every programmer must know" /><published>2021-10-10T00:00:00-04:00</published><updated>2021-10-10T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/coding</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/coding"><![CDATA[<ol>
  <li>Keep It Simple, Stupid (KISS)</li>
</ol>

<p>It means you should be writing code as simple as possible. One of the rules of basic programming is to never get caught up in trying to be overly clever or showing off with a thick block of advanced code. If you can write a script in one line, write it in one line.</p>

<p>Here’s a simple function:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">addNumbers</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>One programming principle in this spirit is to use clear variable names. Take advantage of coding libraries and use existing tools. Make it easy to come back after six months and get right back to work. Keeping things simple will save you so much needless suffering down the line.</p>

<ol>
  <li>Write DRY Code</li>
</ol>

<p>The Don’t Repeat Yourself (DRY) computer programming principle means, plainly, not repeating code. It’s a common coding mistake. When writing code, avoid duplication of data or logic. If you’ve ever copied and pasted code within your program, it’s not DRY code.</p>

<p>Take a look at this script:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">addNumberSequence</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
<span class="err">    </span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="err">    </span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
<span class="err">    </span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
<span class="err">    </span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
<span class="err">    </span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
<span class="err">    </span><span class="k">return</span> <span class="nx">number</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Instead of duplicating lines, try to find an algorithm that uses a loop instead.</p>

<p>DRY code is easy to maintain. It’s easier to debug one loop that handles 50 repetitions than 50 blocks of code that handle one repetition each.</p>

<p>Related:
The Best Programming Projects for Beginners</p>
<ol>
  <li>Open/Closed
Working with a sense of good programming principles will streamline your work and make it more effective.</li>
</ol>

<p>This principle of programming means that you should aim to make your code open to extension but closed to modification. This is an important principle when releasing a library or framework that others will use.</p>

<p>For example, suppose you’re maintaining a GUI framework. You could release a version for coders to directly modify and integrate your released code. What happens when you release a major update four months later, though?</p>

<p>Their code will break. This will likely make your cohorts very unhappy. They won’t want to use your library for much longer, no matter how helpful it may have been in its heyday.</p>

<p>Instead, release code that prevents direct modification and encourages extension. Basic programming principles like this separate core behavior from modified behavior. The code is more stable and easier to maintain.</p>
<ol>
  <li>Composition Over Inheritance</li>
</ol>

<p>If you write code using object-oriented programming, you’re going to find this principle of programming to be very useful. The composition over inheritance principle states: objects with complex behaviors should contain instances of objects with individual behaviors. They should not inherit a class and add new behaviors.</p>

<p>Relying on inheritance causes two major issues. First, the inheritance hierarchy can get messy in a hurry. You also have less flexibility for defining special-case behaviors. Let’s say you want to implement behaviors to share:</p>

<p><img src="https://static1.makeuseofimages.com/wordpress/wp-content/uploads/2021/09/principle-of-programming.png?q=50&amp;fit=crop&amp;w=943&amp;dpr=1.5" alt="" /></p>

<p>Composition programming is cleaner to write, easier to maintain, and allows for flexibility-defining behaviors. Each individual behavior is its own class. You can create complex behaviors by combining individual behaviors.</p>
<ol>
  <li>Single Responsibility
The principles of coding all share a common goal: better code written by more knowledgeable programmers.</li>
</ol>

<p>The single responsibility principle states that every class or module in a program should only provide one specific functionality. As Robert C. Martin puts it, “A class should have only one reason to change.”</p>

<p>Classes and modules often start off this way. Be careful not to add too many responsibilities as classes get more complicated. Refactor and break them up into smaller classes and modules.</p>

<p>The consequence of overloading classes is twofold. First, it complicates debugging when you’re trying to isolate a certain module for troubleshooting. Second, it becomes more difficult to create additional functionality for a specific module. Good programming principles prevent these problems before they become problems to deal with.</p>
<ol>
  <li>Separation of Concerns</li>
</ol>

<p>The separation of concerns concept is an abstract version of the single responsibility principle. This idea states that a program should be designed with different containers, and these containers should not have access to each other.</p>

<p>A well-known example of this is the model-view-controller (MVC) design. MVC separates a program into three distinct areas: the data (model), the logic (controller), and what the page displays (view). Variations of MVC are common in today’s most popular web frameworks.</p>

<p>For example, the code that handles the database doesn’t need to know how to render the data in the browser. The rendering code takes input from the user, but the logic code handles the processing. Each piece of code is completely independent.</p>

<p>The result is code that is easy to debug. If you ever need to rewrite the rendering code, you can do so without worrying about how the data gets saved or the logic gets processed.</p>

<ol>
  <li>You Aren’t Going to Need It (YAGNI)</li>
</ol>

<p>This principle means you should never code for functionality on the off chance that you may need something in the future. One of the most important principles of computer programming to learn is that you shouldn’t try to solve a problem that doesn’t exist.
In an effort to write DRY code, programmers may violate this principle. Often, inexperienced programmers try to write the most abstract and generic code that they can. Too much abstraction, however, causes bloated code that’s impossible to maintain.
Only apply DRY programming principles when you need to; if you notice chunks of code written over and over, implement a layer of abstraction. Don’t think too far ahead at the expense of your current code batch.</p>

<ol>
  <li>Document Your Code</li>
</ol>

<p>With all of this talk of the principles of coding, it can be easy to forget about the human on the other side who may eventually be getting into your code themselves.
Any senior developer will stress the importance of documenting your code with proper comments. All languages offer them; you should make it a habit to write them. Leave comments to explain objects, enhance variable definitions, and make functions easier to understand.</p>

<p>Here’s a JavaScript function with comments guiding you through the code:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// This function will add 5 to the input if odd, or return the number if even</span>
<span class="kd">function</span> <span class="nf">evenOrOdd</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
<span class="err">    </span><span class="c1">// Determine if the number is even</span>
<span class="err">    </span><span class="k">if </span><span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
<span class="err">        </span><span class="k">return</span> <span class="nx">number</span><span class="p">;</span>
<span class="err">    </span><span class="p">}</span>
<span class="err">    </span><span class="c1">// If the number is odd, this will add 5 and return </span>
<span class="err">    </span><span class="k">else</span> <span class="p">{</span>
<span class="err">        </span><span class="k">return</span> <span class="nx">number</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
<span class="err">    </span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Leaving comments is a little more work while you’re coding. It takes time and steals your attention away from the real work at hand. You understand your code pretty well anyway, right? Who cares? It’s worth remembering that nothing is disposable, even in the world of tech. What is a computer programming principle at the end of the day if the person on the other side ends up getting lost?</p>

<p>We recommend going the extra mile and leaving comments anywhere you worry that things become murky or unclear, especially when collaborating with others. Don’t frustrate your fellow developers by forcing them to decipher your syntax.</p>

<p>Try writing a program, leaving it alone for six months, and returning to modify it. You’ll be glad you documented your program instead of having to pour over every function to remember how it works.</p>
<ol>
  <li>Refactor
This programming principle encourages you to always look at your work with fresh eyes.</li>
</ol>

<p>It’s hard to accept, but your code isn’t going to be perfect the first time. Refactoring code means reviewing your code and looking for ways to optimize it, making it more efficient while keeping the results exactly the same.</p>

<p>Codebases are constantly evolving. One of the principles of programming is remembering that it’s completely normal to revisit, rewrite, or even redesign entire chunks of code. It doesn’t mean you didn’t succeed the first time you wrote your program; you’re inevitably going to get more familiar with a project over time. Use that knowledge to adjust yourself as you make progress.</p>
<ol>
  <li>Clean Code At All Costs</li>
</ol>

<p>Leave your ego at the door and forget about writing clever code. When we say this, we mean the kind of code that looks more like a riddle than a solution. You’re not coding to impress strangers. You’re in this profession to solve problems.</p>

<p>Don’t try to pack a ton of logic into one line. Leave clear instructions in your comments and documentation. If your code is easy to read, it will also usually be easy to maintain.</p>

<p>Source: <a href="https://www.makeuseof.com/tag/basic-programming-principles/">MakeUseOf</a></p>]]></content><author><name>Rom</name></author><category term="Coding" /><category term="Workflow" /><summary type="html"><![CDATA[Keep It Simple, Stupid (KISS)]]></summary></entry><entry><title type="html">Podcast of the day</title><link href="http://localhost:4000/rmb-blog/blog/podcast" rel="alternate" type="text/html" title="Podcast of the day" /><published>2021-07-31T00:00:00-04:00</published><updated>2021-07-31T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/podcast</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/podcast"><![CDATA[<iframe style="border-radius:12px" src="https://open.spotify.com/embed/episode/0SyiN9n3KsMV3SYT9UG7N5?utm_source=generator" width="100%" height="352" frameborder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy">
</iframe>]]></content><author><name>Rom</name></author><category term="podcast" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Quote of the day</title><link href="http://localhost:4000/rmb-blog/blog/quote" rel="alternate" type="text/html" title="Quote of the day" /><published>2020-07-01T00:00:00-04:00</published><updated>2020-07-01T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/quote</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/quote"><![CDATA[<p>Go for it now. 
The future is promised to no one.</p>

<p>— <em>Wayne Dyer</em></p>]]></content><author><name>Rom</name></author><category term="wisdom" /><summary type="html"><![CDATA[Go for it now. The future is promised to no one.]]></summary></entry><entry><title type="html">CSS Properties to use</title><link href="http://localhost:4000/rmb-blog/blog/CSS-Properties" rel="alternate" type="text/html" title="CSS Properties to use" /><published>2020-06-20T13:00:00-04:00</published><updated>2020-06-20T13:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/CSS-Properties</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/CSS-Properties"><![CDATA[<ol>
  <li><strong>Change the Text Selection colour</strong>
To change the Text Selection colour, ::selection is a pseudo-element that overrides at the browser-level to replace the text highlight colour with a colour you choose. The colour can be seen once you select the content with the cursor.</li>
</ol>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">::selection</span> <span class="p">{</span>
 	<span class="nl">background-color</span><span class="p">:</span> <span class="m">#f3b70f</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><strong>Conic-gradient</strong>
Creates an image consisting of a gradient with set colour transitions rotated around a central point (rather than radiating from the central point as you’d find with a radial-gradient).</li>
</ol>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.piechart</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="n">conic-gradient</span><span class="p">(</span><span class="nb">rgb</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">132</span><span class="p">,</span> <span class="m">45</span><span class="p">)</span> <span class="m">0%</span> <span class="m">25%</span><span class="p">,</span> <span class="nb">rgb</span><span class="p">(</span><span class="m">166</span><span class="p">,</span> <span class="m">195</span><span class="p">,</span> <span class="m">209</span><span class="p">)</span> <span class="m">25%</span> <span class="m">56%</span><span class="p">,</span> <span class="m">#ffb50d</span>  <span class="m">56%</span> <span class="m">100%</span><span class="p">);</span>
  <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><strong>Counters</strong>
To style numbers in a numbered list, we need to play with properties called CSS counters. CSS counters let you adjust the appearance of content based on its location in a document.</li>
</ol>

<p>To use CSS counters:</p>
<ul>
  <li>The counters’ value can be increased or decreased by counter-increment</li>
  <li>Can display the value of the counter by using the counter() or counters() function from within a content property</li>
</ul>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">ol</span><span class="nc">.numbered-list</span> <span class="o">&gt;</span> <span class="nt">li</span><span class="nd">:before</span> <span class="p">{</span>
 <span class="nl">content</span><span class="p">:</span> <span class="n">counter</span><span class="p">(</span><span class="n">li</span><span class="p">);</span>
 <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
 <span class="nl">box-sizing</span><span class="p">:</span> <span class="n">border-box</span><span class="p">;</span>
 <span class="nl">width</span><span class="p">:</span> <span class="m">45px</span><span class="p">;</span>
 <span class="nl">height</span><span class="p">:</span> <span class="m">45px</span><span class="p">;</span>
 <span class="nl">background</span><span class="p">:</span> <span class="m">#f3b70f</span><span class="p">;</span>
 <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">ol</span><span class="nc">.numbered-list</span> <span class="nt">li</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
  <span class="nl">list-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">counter-increment</span><span class="p">:</span> <span class="n">li</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Rom</name></author><category term="web development" /><category term="code" /><summary type="html"><![CDATA[Change the Text Selection colour To change the Text Selection colour, ::selection is a pseudo-element that overrides at the browser-level to replace the text highlight colour with a colour you choose. The colour can be seen once you select the content with the cursor.]]></summary></entry><entry><title type="html">Web App - Creation stages</title><link href="http://localhost:4000/rmb-blog/blog/web-app" rel="alternate" type="text/html" title="Web App - Creation stages" /><published>2020-06-05T00:00:00-04:00</published><updated>2020-06-05T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/web-app</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/web-app"><![CDATA[<h3 id="ideation-stage">Ideation stage:</h3>
<ul>
  <li>sourse an idea</li>
  <li>define a functionality</li>
</ul>

<h3 id="design-stage">Design stage:</h3>
<ul>
  <li>sketch your web app</li>
  <li>plan your workflow</li>
  <li>wireframe the ui</li>
  <li>seek early validation</li>
</ul>

<h3 id="development-stage">Development stage:</h3>
<ul>
  <li>architect your database</li>
  <li>develop your frontend</li>
  <li>build your backend</li>
</ul>

<h3 id="launch-stage">Launch stage:</h3>
<ul>
  <li>host your web app</li>
  <li>deploy web app</li>
</ul>]]></content><author><name>Rom</name></author><category term="web development" /><summary type="html"><![CDATA[Four stages of a web app.]]></summary></entry><entry><title type="html">Quote of the day</title><link href="http://localhost:4000/rmb-blog/blog/quote" rel="alternate" type="text/html" title="Quote of the day" /><published>2020-05-01T00:00:00-04:00</published><updated>2020-05-01T00:00:00-04:00</updated><id>http://localhost:4000/rmb-blog/blog/quote</id><content type="html" xml:base="http://localhost:4000/rmb-blog/blog/quote"><![CDATA[<p>Live as if you were to die tommorow.
Learn as if you were to live forever.</p>

<p>— <em>Mahatma Gandhi</em></p>]]></content><author><name>Rom</name></author><category term="wisdom" /><summary type="html"><![CDATA[Live as if you were to die tommorow. Learn as if you were to live forever.]]></summary></entry></feed>